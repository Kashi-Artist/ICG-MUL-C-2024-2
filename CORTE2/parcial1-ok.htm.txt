<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dibujo de Polígono Regular</title>
    <style>
        canvas {
            border: 1px solid black;
        }
        .container {
            margin-bottom: 20px;
        }
        #dibujarButton {
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <h1>GRAFICOS DE POLIGONOS REGULARES</h1>
    <div class="container">
        <label for="n">Número de lados (n):</label>
        <input type="number" id="n" min="3" required>
    </div>
    <div class="container">
        <label for="dimension">Escoge entre Apotema o Lado:</label>
        <select id="dimensionType">
            <option value="lado">Lado (L)</option>
            <option value="apotema">Apotema (A)</option>
        </select>
        <input type="number" id="dimensionValue" step="0.01" required>
    </div>
    <div class="container">
        <label>---El tamaño del canvas es de 500 x 500---</label>
    </div>
    <div class="container">
        <label for="x">Coordenada X:</label>
        <input type="number" id="x" required>
    </div>
    <div class="container">
        <label for="y">Coordenada Y:</label>
        <input type="number" id="y" required>
    </div>
    <button id="dibujarButton" onclick="iniciarConstruccion()">Dibujar Polígono</button>
    <canvas id="miCanvas" width="500" height="500"></canvas>

    <script>
        class Cartesiana {
            constructor(x, y) {
                this._x = x;
                this._y = y;
            }

            get x() {
                return this._x;
            }

            get y() {
                return this._y;
            }

            set x(value) {
                this._x = value;
            }

            set y(value) {
                this._y = value;
            }
        }

        class Polar {
            constructor(radio, angulo) {
                this._radio = radio;
                this._angulo = angulo;
            }

            get radio() {
                return this._radio;
            }

            get angulo() {
                return this._angulo;
            }

            set radio(value) {
                this._radio = value;
            }

            set angulo(value) {
                this._angulo = value;
            }

            aCartesiana() {
                const x = this._radio * Math.cos(this._angulo);
                const y = this._radio * Math.sin(this._angulo);
                return new Cartesiana(x, y);
            }
        }

        class ConstruccionPoligono {
            constructor() {
                this.canvas = document.getElementById('miCanvas');
                this.ctx = this.canvas.getContext('2d');
            }

            obtenerValores() {
                const n = parseInt(document.getElementById('n').value);
                const dimensionType = document.getElementById('dimensionType').value;
                const dimensionValue = parseFloat(document.getElementById('dimensionValue').value);
                const x = parseFloat(document.getElementById('x').value);
                const y = parseFloat(document.getElementById('y').value);

                if (!n || !dimensionValue || !x || !y || n < 3 || dimensionValue <= 0) {
                    alert('Por favor, ingrese valores válidos.');
                    return null;
                }

                const esLado = dimensionType === "lado";

                return {
                    dimension: dimensionValue,
                    numeroDeLados: n,
                    coordenadaX: x,
                    coordenadaY: y,
                    esLado
                };
            }

            calcularVertices(valores) {
                const { dimension, numeroDeLados, esLado, coordenadaX, coordenadaY } = valores;
                let radio;

                if (esLado) {
                    const apotema = (dimension / 2) / Math.tan(Math.PI / numeroDeLados);
                    radio = apotema / Math.cos(Math.PI / numeroDeLados);
                } else {
                    radio = dimension / Math.cos(Math.PI / numeroDeLados);
                }

                const angulo = 2 * Math.PI / numeroDeLados;
                const rotacion = Math.PI / 2;

                const vertices = [];
                for (let i = 0; i < numeroDeLados; i++) {
                    const polar = new Polar(radio, i * angulo - rotacion);
                    const cartesiana = polar.aCartesiana();
                    vertices.push([coordenadaX + cartesiana.x, coordenadaY + cartesiana.y]);
                }
                return vertices;
            }

            graficarPoligono(vertices) {
                this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                this.ctx.beginPath();
                vertices.forEach((vertex, index) => {
                    if (index === 0) {
                        this.ctx.moveTo(vertex[0], vertex[1]);
                    } else {
                        this.ctx.lineTo(vertex[0], vertex[1]);
                    }
                });
                this.ctx.closePath();
                this.ctx.stroke();
            }

            construir() {
                const valores = this.obtenerValores();
                if (valores) {
                    const vertices = this.calcularVertices(valores);
                    this.graficarPoligono(vertices);
                }
            }
        }

        function iniciarConstruccion() {
            const construccion = new ConstruccionPoligono();
            construccion.construir();
        }
    </script>
</body>
</html>
